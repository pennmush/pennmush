& FLAGS

  Flags give objects certain abilities or qualities. For example, a
  wizard player has wiz powers because s/he has the WIZARD flag set.

  Some flags can only be set on certain types of objects, such as just
  players or just rooms. Other flags, like VISUAL, can be set on any
  type of object (player, room, exit, thing).

  Flags can be set on an object with the @set command or set() function.
  To un-set a flag, use the exclamation point (!) before the flag
  name. For help on any particular flag, type 'help <flag name>'.

  A descriptive list of default flags is available in 'help flag list'.
  A complete list of all flags is available through '@flag/list'.

  Continued in 'help flags2'.
& FLAGS2
  You can see the list of flags set on an object in several ways.

  1. If you are allowed to examine the object. The flags are listed in 
     expanded word format on the line just below the object's name, after 
     the word "Flags:".
  2. Flag abbreviations are also visible after the object's name in the room
     description, if the object is not set OPAQUE and you are not set MYOPIC.
  3. The lflags() and flags()s function will return a list of flag names and
     abbreviations for an object, respectively.

  Note: The object type (player, thing, room, exit or garbage) is not
  actually a flag. See 'help types of objects' for more information.

See also: examine, flags(), hasflag(), orflags(), andflags(), orlflags(),
  andlflags(), types of objects, type(), hastype(), @flag, FLAG LIST,
  @set, set()
& FLAG LIST
& FLAGS LIST
Flag  Title            Flag  Title            Flag  Title           
-----------------------------------------------------------------------
A - Abode/Ansi         C - Chown_ok/Color     D - Dark              
F - Fixed/Floating     H - Haven              I - Trust             
J - Judge/Jump_ok      L - Link_ok            M - Monitor           
N - No_leave/No_tel    O - Opaque             Q - Quiet             
S - Sticky             U - Unfindable         V - Visual            
W - Wizard             X - Safe               Z - Shared/Z_tel      

^ - Listen_parent      ~ - Noaccents          ? - Unregistered      
" - Nospoof            a - Audible            b - Debug             
d - Destroy_ok         e - Enter_ok           g - Gagged            
h - Halt               i - Orphan             j - Jury_ok           
k - Keepalive          l - Light              m - Mistrust/Myopic   
n - No_command         o - On-vacation        p - Puppet            
r - Royalty            s - Suspect            t - Transparent       
u - Uninspected        v - Verbose            w - No_warn           
x - Cloudy/Terse      

    Chan_usefirstmatch     Hear_connect           Heavy             
    Loud                   No_log                 Paranoid          
    Track_money       
-----------------------------------------------------------------------
Some flags may not be enabled on some MUSHes. @flag/list will show
which are available.

& ABODE
  Flag:  ABODE  (rooms)

  If a room has the ABODE flag set, any player or thing can set his home 
  there. It does not allow you to link exits to the room. It allows you to
  make a room a public 'living area'.
  
  To make a room your home, type '@link me=here' while standing in the
  room.

See also: @link, LINK_OK
& ANSI
  Flag:  ANSI  (players)
  
  When set, this flag allows a player to see ANSI colors, generated by the
  ansi() function. Some ANSI is used by the MUSH, for example to highlight
  the names of objects (if the ansi_names @config option is on), and the
  names of attributes.
  
See also: ansi(), @config
& AUDIBLE
  Flag:  AUDIBLE  (all types)

  Objects which are set AUDIBLE forward sound in a number of ways. Only 
  sound passing the object's @filter, and its @lock/filter, is forwarded.
  The lock receives the sound heard as %0. The forwarded sound is always 
  prefixed with the object's @prefix.
  
  If an AUDIBLE object has an @forwardlist attribute set, sound heard by the
  object is forwarded to the objects listed in the @forwardlist. See 'help
  @forwardlist' for more information.
  
  When a THING is set AUDIBLE, any sound made inside it is broadcast to other
  objects in its location. This is useful for coding vehicles. Only sound 
  passing the @filter is broadcast, and is prefixed with the thing's @prefix,
  or "From [name(<thing>)], " if no @prefix is set.
  
  Setting the AUDIBLE flag on a ROOM activates audible exits in that room.
  EXITs which are set AUDIBLE propagate sound from their source room to their 
  destination, prefixed with the exit's @prefix, or "From
  [name(home(<exit>))], " if no @prefix is set.
  
See also: @forwardlist, @filter, @prefix
& TRACK_MONEY
  Flag: TRACK_MONEY (players)

  By setting the TRACK_MONEY flag, a player can determine which
  objects may be using their money. TRACK_MONEY reports all charges to
  a player and their objects except the queue deposit.

  > @set me=TRACK_MONEY
  > give Javelin=50
  You give 50 pennies to Javelin.
  GAME: Walker spent 50 pennies!
  > @create foo
  GAME: Walker spent 10 pennies!
  Created: Object #345.
  > @for foo=@search eval=1
  GAME: foo(#345) spent 100 pennies!
  (search results)
  > <a whole buncha commands>
  GAME: Object Walker(#123) lost a Penny to queue loss.

See also: no_pay
& BUILDER
  BUILDER 

  On some MUSHes, building (@dig, @open, and sometimes @create) is restricted
  to those with the BUILDER @power. You can check to see if building is
  restricted on a MUSH with '@command @dig', etc.

See also: POWERS, @power, @dig, @open, @create
& CHOWN_OK
  Flag:  CHOWN_OK  (things, rooms, exits)

  You can set this flag on an object you own to allow other players to
  transfer ownership of the object to themselves (using @chown). 
  
See also: @chown
& CLOUDY
  Flag:  CLOUDY (exits)

  If this flag is set on a (non-TRANSPARENT) exit, when a player looks at 
  the exit they will see the contents of the destination room following 
  the exit's description.

  If the flag is set on a TRANSPARENT exit, when a player looks at the exit
  they will see only the description of the destination room following the 
  exit's description, and will not see contents.
  
See also: TRANSPARENT, look
& COLOR
  Flag:  COLOR  (players)
  
  This flag was previously used, alongside ANSI, to control whether a player
  could see ANSI colors. It is no longer used.

See also: ANSI, ansi()
& CONNECTED
  Flag:  CONNECTED  (players)

  This flag is used internally by the MUSH to track whether a player is
  currently connected. It cannot be set or cleared manually.

  Mortal code can't use hasflag(<x>,connected) to test if a player is
  connected. Consider using conn(), lwho(), or mwho() instead.

See also: conn(), lwho(), mwho()
& DARK
  Flag:  DARK  (all types)

  When a room is set DARK, only objects which are set LIGHT will show up
  in the rooms contents list when someone "look"s in the room. Exits which
  are set DARK do not show up in a room's Obvious Exits list.
  
  DARK players and things do not show up in the contents list of rooms.
  Only Wizard players can set themselves dark. Puppets and Audible things
  with an @forwardlist will not be hidden by the flag.
  
  Note that players and things still trigger enter/leave messages, etc, in
  DARK rooms.
  
  If the "full_invis" @config option is on, DARK players and things will show
  up as "Someone" or "Something", respectively, when they speak.

  In the past, players set DARK were automatically hidden from the WHO list
  via @hide, but this no longer happens. If you wish to disappear completely,
  you must use @hide after setting yourself DARK.

See also: LIGHT, @hide
& DEBUG
  Flag: DEBUG  (all types)
  
  The DEBUG flag is used for debugging MUSHcode. When an object is set DEBUG,
  all parser evaluation results will be shown to the object's owner and to 
  any dbrefs in the object's DEBUGFORWARDLIST, in the format:
 
  #dbref! <string to evaluate> :
  #dbref!  recursive evaluation of functions in string
  #dbref! <string to evaluate> => <evaluated string>

  Because the parser does recursive evaluations, you will see
  successive messages evaluating specific parts of an expression. This
  enables you to pinpoint exactly which evaluation is going wrong.

  Objects run under this flag are computationally expensive, and can generate
  large amounts of spam, so this flag should only be set when needed, and
  cleared afterwards.
  
  There's also a DEBUG attribute flag, which only affects a single attribute;
  see 'help attribute flags' for more information. You can also use the "}"
  command prefix to run a command with DEBUG output just once.
  
  See 'help debug2' for an example.
See also: VERBOSE, PUPPET, }
& DEBUG2

  > @create Test
  > @set Test=DEBUG
  > &cmd test=$wc *: say String %0 has [strlen(%0)] letters and [words(%0)] words.
  > wc This is my test string

  #14! String %0 has [strlen(%0)] letters and [words(%0)] words. :
  #14!  strlen(%0) :
  #14!   %0 => This is my test string
  #14!  strlen(%0) => 22
  #14!  words(%0) :
  #14!   %0 => This is my test string
  #14!  words(%0) => 5
  #14! String %0 has [strlen(%0)] letters and [words(%0)] words. =>
    String This is my test string has 22 letters and 5 words.

  Test says, "String This is my test string has 22 letters and 5 words."

& DESTROY_OK
  Flag:  DESTROY_OK  (things)

  The DESTROY_OK flag allows anyone to @destroy it. This is good for
  "temporary" objects like "Can of Cola". If the object has an @lock/destroy
  set, a player who doesn't control the object must pass this lock in order 
  to destroy it.

  DESTROY_OK takes precedence over SAFE.

See also: @destroy
& ENTER_OK
  Flag:  ENTER_OK  (all types)
 
  If a player or thing is ENTER_OK, someone may "enter" it, if they pass its
  @lock/enter, or "give" to it, if they pass its @lock/from.

  This flag has no effect on rooms or exits.

See also: enter, leave, give, @lock, @ealias
& FIXED
  Flag: FIXED (players)
  
  When this flag is set on a player, it prevents them or any of their objects
  from using the @teleport or home command. The only exception is that a 
  player's objects are permitted to @teleport themselves to the player's
  inventory.
  
See also: @teleport, home, goto
& FLOATING
  Flag:  FLOATING (rooms)

  If a room is set floating, you will not be notified every 10 minutes or so
  that you have a disconnected room. A disconnected room is one that can't be
  reached from room #0, or (if the exits_connect_rooms @config option is on)
  one which has no exits.
  
  If you don't plan to have your main grid accessible from Room #0, it's
  better to enable exits_connect_rooms than to set all your rooms FLOATING.
& GAGGED
  Flag: GAGGED (players)

  The Gagged flag prevents a player from speaking, building, moving objects,
  and many other things, leaving him able to do little more than move himself
  and look. It's normally used as a penalty for those who break MUSH rules.

  Only wizards can set this flag.
See also: FIXED
& GOING
& GOING_TWICE
  Flag:  GOING  (all types)
  Flag:  GOING_TWICE  (all types)

  These are internal flags set on objects when they are scheduled to be
  destroyed with @destroy. It cannot be set or cleared manually; use @destroy
  and @undestroy.
  
See also: @destroy, @undestroy
& HALT
  Flag:  HALT  (all types)

  Objects set HALT cannot perform any MUSH actions, queue commands, evaluate
  softcode, etc. Players set HALT can still enter commands directly from
  their clients.

See also: @halt, @restart
& HAVEN
  Flag:  HAVEN  (players, rooms)

  If a player is set HAVEN, she cannot be paged and anyone paging them
  will be sent a brief notification. You can also set a longer @HAVEN
  message if you wish. You may prefer to use @lock/page to block out
  only specific individuals.

  If a room is set HAVEN, the 'kill' command cannot be used in that room.

See also: @haven, kill
& HEAR_CONNECT
  Flag:  HEAR_CONNECT  (players)
  
  Players with this flag will receive a message whenever a player connects,
  disconnects, or is created. Mortals will not hear messages for players 
  connecting/disconnecting dark. Only royalty and wizards can set this flag.
  
See also: @aconnect, @adisconnect
& HEAVY
  Flag:  HEAVY  (all types)

  The HEAVY flag, which can only be set by wizards or royalty, prevents a
  mortal from @teleporting an object.

See also: @teleport
& LOUD
  Flag:  LOUD  (all types)

  LOUD objects bypass all speech, channel speech, and interaction @locks.
  This flag can only be set by royalty or wizards.

See also: can_spoof and pemit_all (help powers2)
& INHERIT
& TRUST
  Flag:  TRUST  (all types)
  
  Setting an object TRUST prevents anything else from controlling it, aside
  from WIZARDs, the object's owner, or another object owned by the same
  player which is also set TRUST. It also allows the object to control its
  owner.
  
See also: MISTRUST, CONTROL
& JUDGE
& JURY_OK
  Flags:  JUDGE and JURY_OK  (players)
 
  These flags do nothing by default, but are present in new dbs for
  historical reasons. They can be used in softcode as desired, or removed
  with @flag if unneeded.

See also: @flag
& JUMP_OK
& TEL_OK
  Flag:  JUMP_OK  (rooms)

  When a room is set JUMP_OK, anyone who passes the room's @lock/teleport
  can @teleport into it.
  
See also: @teleport, @lock, NO_TEL, Z_TEL
& KEEPALIVE
  Flag:  KEEPALIVE  (players)

  When this flag is set on a player with a telnet-capable connection, a 
  telnet NOP (no-operation) is sent after there's been no activity on the 
  connection for a minute, to generate socket activity without generating 
  any output. In a way, it's the opposite of the IDLE command. IDLE is 
  sent by clients to keep a connection open, while KEEPALIVE tells the 
  server to send a message. Both are intended for use by people going 
  through home router/NAT appliances with short inactivity timeouts.

See also: IDLE, terminfo()
& LIGHT
  Flag:  LIGHT  (all types)

  Things, players, and exits which have the LIGHT flag set on them (and are
  not also set DARK) appear in the contents of DARK rooms.
  
  Setting a room LIGHT causes everything - even DARK objects - to show up
  in the room's contents list.

See also: DARK
& LINK_OK
  Flag: LINK_OK  (rooms, things)

  If a room or object is LINK_OK, anyone who passes the room's @lock/link
  can link exits to it (but still not from it). Also, LINK_OK overrides the
  TRUST protection against @trigger (although not @force or @set). 
  
  Anyone who passes a LINK_OK object's @lock/parent can @parent an object
  to it.

See also: @link, TRUST, @parent, PARENTS, OPEN_OK
& OPEN_OK
  Flag: OPEN_OK  (rooms)
  
  When set on a room, anyone who passes the rooms @lock/open can open
  exits in the room with @open (or move exits to the room with @teleport).
  
See also: @open, LINK_OK
& MONITOR
  Flag:  MONITOR  (players, things, rooms)
 
  The MONITOR flag activates the ^-listen patterns on an object. Objects 
  which have ^-listen patterns but are not set MONITOR do not check those
  patterns. Unlike $-commands, ^-listens are not inherited from parents by
  default; LISTEN_PARENT must be set as well as MONITOR to enable this.

  The NO_COMMAND attribute flag disables ^-listen matching for a single
  attribute; see 'help attribute flags' for details.

  If using the LISTEN Attribute Tree, you must set the Root Attribute
  !NO_COMMAND. By default this Attribute/Attribute Root has been set 
  NO_COMMAND by the system. Attributes which are set NO_COMMAND will not
  be checked for ^-listen patterns.
  
  This flag used to allow players to hear when someone connected to
  the game, but that is now controlled by the HEAR_CONNECT flag.  
  
See also: LISTENING, @listen, LISTEN_PARENT, HEAR_CONNECT
& MYOPIC
  Flag:  MYOPIC  (players)

  Players set MYOPIC will not see the dbref number or flag list of objects
  they control after their names. It's useful if you don't like to see object
  numbers.
  
  Anything owned by a MYOPIC player is also treated as MYOPIC.

See also: DBREF, TERSE
& MISTRUST
  Flag:  MISTRUST  (things, rooms, exits)
  
  The MISTRUST flag prevents an object from controlling another object via
  Control @locks, Zone @locks on ZMOs or SHARED players, or from controlling
  other objects with the same owner. It also prevents the object from
  inheriting the no_pay, unkillable and no_quota powers from its owner.
  
  This flag can be used when you with a single player to retain ownership
  of objects that other players will control or run arbitrary code on, and
  don't want those objects to be able ot affect your other objects.
  
  Note that if a MISTRUST object is set WIZARD is will still control all
  objects in the database, and that MISTRUST does not prevent no_pay or 
  other powers from being applies to the object directly.

See also: control, TRUST
& NOACCENTS
  Flag:  NOACCENTS  (players)

  This flag causes all accented characters to be converted to non-accented
  alternatives before being sent to a connection. See HELP STRIPACCENTS() 
  for caveats.

See also: i18n, accent(), stripaccents()
& NO_COMMAND
  Flag:  NO_COMMAND  (all types)
  
  The NO_COMMAND flag disables the checking of $-commands on an object. The 
  server runs faster when fewer objects are checked for $-commands; thus, 
  any object which does not have $-commands on it should be set NO_COMMAND. 
  Many MUSHes choose to have all objects initially set NO_COMMAND at
  creation. The flag has no effect on exits, which are never checked for
  $-commands.
  
  There is also a NO_COMMAND attribute flag, which disables $-command AND
  ^-listen checking for a single attribute. See 'help attribute flags'.

See also: USER-DEFINED COMMANDS
& NO_LEAVE
& NOLEAVE
  Flag: NO_LEAVE (objects)
  
  When this flag is set on an object, players cannot "leave" it. Attempts to
  leave the object will trigger its @LFAIL, @OLFAIL, and @ALFAIL, if set.
  
  For more specific control, you can set an @lock/leave.

See also: leave, @lock
& NO_LOG
  Flag:  NO_LOG  (all types)

  When set on an object, prevents the logging of commands that object runs.
  Useful on globals objects when the log_commands config option is turned on.
  
  Only settable by Wizards.
& NO_TEL
  Flag:  NO_TEL  (rooms)

  The NO_TEL flag prevents objects in a room from being @teleported; mortals 
  in the room cannot use @teleport, nor can other objects @teleport them 
  out. This flag is checked on the "absolute room" of an object; thus, if 
  you are in a container in a room which is NO_TEL, you cannot use 
  @teleport from that container. There is no way to get out of a NO_TEL room
  except by exiting in some "normal" manner, or by going "home". Puzzle 
  rooms, prisons, etc, would probably benefit from this flag.
  
See also: JUMP_OK, Z_TEL
& NO_WARN
& NOWARN
  Flag: NO_WARN  (all types)

  When this flag is set on an object, its owner will not receive any building 
  warnings from that object. When it is set on a player, that player will not
  receive any building warnings at all.

See also: warnings, @warnings, @wcheck
& NOSPOOF
& PARANOID
  Flag:  NOSPOOF  (all types)
  Flag:  PARANOID  (all types)

  If an object is set NOSPOOF, messages of all kinds will be tagged with the
  name of the person/object causing them. This prevents spoofing and lets you
  see where such messages originated. When a NOSPOOF object is also set
  PARANOID, the dbref of the emitting object is also shown. You will not see
  nospoof information for your own messages unless you are also set PARANOID.

  When a player is set NOSPOOF or PARANOID, everything it owns is also
  treated as having the flag.
  
  Note that NOSPOOF output can be spammy. Nospoof information is not matched
  against @listen or ^-listen patterns.
  
  The nospoof tag is [Source:], and the paranoid tag is [Source(#dbref)].
    
See also: SPOOFING, @emit, @pemit, @remit, @oemit, @nspemit
& ON-VACATION
  Flag:  ON-VACATION  (players)

  This flag may be used by the MUSH to allow players to indicate when they 
  have left for vacation, to prevent themselves from being purged for 
  inactivity. Its usefulness depends on game policy.
  
  You will be notified (periodically and on connect) if you leave this flag 
  set, to remind you to unset it when you return from vacation.
& OPAQUE
  Flag:  OPAQUE  (all types)

  When set on players and things, OPAQUE prevents others who look at the
  object from seeing its inventory. It also stops anyone inside the object
  from using look/outside to see the object's location.
  
  When set on an exit in a TRANSPARENT room, the exit is displayed
  as if the room weren't TRANSPARENT.

  Meaningless for rooms.

See also: TRANSPARENT, look
& ORPHAN
  Flag:  ORPHAN  (all types)

  Normally, all objects have an ancestor at the top of their @parent chain,
  and attributes, locks, etc, are inherited from the ancestor after all
  real @parents have been checked. When an object is set ORPHAN, its ancestor
  is ignored.

See also: @parent, ancestors
& PUPPET
  Flag:  PUPPET  (things)
  
  Things which are set PUPPET relay all sound they hear to their owner.
  Puppets won't normally relay sound if they are in the same room as their
  owner, but will if the VERBOSE flag is also set.
  
  If you want to relay sound to someone other than the object's owner,
  consider @forwardlist instead.

See: @force, PUPPETS, @forwardlist
& QUIET
  Flag:  QUIET  (all types)

  This flag suppresses several acknowledgement messages from commands, such
  as 'Set', 'Triggered', 'Teleported', etc. 
& ROYALTY
  Flag:  ROYALTY  (all types)

  The Royalty flag gives an object a limited subset of Wizard powers.
  Royalty can use the admin WHO, @teleport any object to any location,
  use @hide, and many other things. Unlike Wizards, they do not implicitly
  control all objects.
  
  Only Wizards can set players royalty, though players who are already set
  royalty can set their own objects royalty as well.
  
  Royalty grants the following @powers implicitly: functions, idle,
  link_anywhere, login, long_fingers, no_quota, open_anywhere  and see_all.
  See 'help <power> power' for more info.

See also: WIZARD, @power
& SAFE
  Flag:  SAFE  (all types)

  Objects set SAFE cannot be destroyed with @destroy (@nuke must be used
  instead). If the "really_safe" @config option is on, objects set SAFE will
  not be destroyed when their owner is @destroyed, but will be @chown'd to
  God instead.
  
See also: @destroy
& STICKY
  Flag:  STICKY  (all types)

  If a thing or player is STICKY, it goes home when dropped. It also goes 
  home when an object carrying it teleports or goes home, unless the object
  controls it.
  
  If a room is STICKY, its drop-to is delayed until the last person leaves.
  
  This flag is meaningless for exits.
  
See also: home, @teleport, DROP-TOS
& SUSPECT
  Flag:  SUSPECT  (all types)

  This flag is only settable by wizards. Players with this flag have their 
  connects, disconnects, name changes, and kills reported to all connected 
  wizards. Actions by any object with this flag are also logged to the 
  MUSH log files.
& TERSE
  Flag:  TERSE  (players, things)

  When an object is set TERSE, it does not see the descriptions, or success
  and failure messages in rooms. This is a useful flag if you're on a slow 
  connection or you're moving through a familiar area and don't want to see 
  tons of text.

  When a player is TERSE, all of their objects are considered to be TERSE.

See also: MYOPIC
& TRANSPARENT
  Flag:  TRANSPARENT  (all types)

  Transparent rooms show the "Obvious Exits" list in a long format; instead
  of showing all exits on a single line, each exit is displayed on its own
  line, with the name of its location. Any exits set OPAQUE are still shown
  in short format, so you can mix the two.

  Transparent exits show the description and contents of the destination
  room, as well as the exit's desc, when looked at. If the exit is also set
  CLOUDY, the destination's contents is not shown.
  
  Example:
    > @set here=transparent
    > look
    A Room
    Obvious Exits:
      Yellow Brick Road leads to Oz.
      Looking Glass leads to Wonderland.
      Locked Door leads nowhere.

See also: OPAQUE, CLOUDY, @exitformat
& UNFINDABLE
  Flag:  UNFINDABLE  (all types)
  
  If a player is set UNFINDABLE, he cannot be found by the @whereis command.
  You also cannot use loc(), locate(), and similar functions to find his 
  location, unless you have the see_all power or equivalent.
  
  If a room is set UNFINDABLE, you cannot locate any of its contents via any
  means (@whereis, the loc() function, etc.) unless you are see_all.
  
  Wizards, Royalty, and players with the Hide and Idle @powers who are idle
  for longer than the idle_timeout @config option who are set UNFINDABLE
  will automatically be @hidden.
  
See also: loc(), @whereis, @hide
& UNINSPECTED 
  Flag: UNINSPECTED (rooms)

  This flag has no hardcoded purpose, but may be used by MUSH staff to
  indicate that a room has been inspectedapproved by staff yet.

See also: UNREGISTERED
& UNREGISTERED
  Flag: UNREGISTERED (players)
  
  This flag may be used by the MUSH to support on-line registration.
  The only restriction on UNREGISTERED players is that they may not be
  granted @powers.
  
See also: UNINSPECTED
& VERBOSE
  Flag:  VERBOSE  (all types)

  An object set VERBOSE echoes the commands it executes to its owner before
  executing them. This differs from the PUPPET flag in that the owner sees 
  the command itself, rather than the output from the command.  This flag is
  extremely useful in debugging, especially if used in conjunction with the 
  PUPPET and DEBUG flags.
  
  Setting the VERBOSE flag on a PUPPET also causes the puppet to relay sound
  to its owner, even when they are in the same room.
  
  Example:
    > @create Test
    Created: Object #5.
    > @set Test=VERBOSE
    Test - VERBOSE set.
    > @force Test=say capstr(hello)
    #5] say capstr(hello)
    Test says, "Hello"
    
See also: PUPPET, DEBUG
& VISUAL 
  Flag:  VISUAL  (all types)

  When this flag is set on an object, it allows any other player who passes
  the object's @lock/examine to examine it and see all the object's
  attributes, and other information such as parent, zone, home, location,
  etc. It does not allow them to make changes to the object. Very useful
  for getting help with code.
  
  There is also a VISUAL attribute flag, which only affects a single
  attribute, and a VISUAL lock flag, which affects @locks. See 
  'help attribute flags' and 'help @lset' for details.

See also: examine, brief, @lock
& WIZARD
  Flag:  WIZARD  (all types)

  Objects set WIZARD control all other objects on the MUSH (except God), can
  use a wide variety of commands, perform many actions remotely via dbref
  number or *<player>, and have many powers and privileges which mortal
  players do not.
  
  Only God can set or clear the WIZARD flag on players, though wizards may
  set objects they own WIZARD. WIZARD objects share the same powers as 
  WIZARD players, with the exception that they cannot @nuke players.
  
See also: ROYALTY, @power
& Z_TEL
  Flag:  Z_TEL  (things, rooms)

  The Z_TEL flag, when set on a zoned room or on the ZMO of a room, prevents 
  objects in the room from being @teleported out of the zone - that is, 
  objects can only be @teleported to a room which is zoned to the same ZMO.
  Setting this flag on the ZMO affects all rooms zoned to it. Like NO_TEL,
  the "home" command will still work. This flag is intended for use in puzzle
  rooms and IC areas.

See also: ZONES, ZONE MASTERS, @chzone, ZONE MASTER ROOMS, NO_TEL, JUMP_OK
& SHARED
& ZONE
  Flag:  SHARED   (players) 

  The SHARED flag is used to designate a player as a Zone Master. Objects 
  owned by a Zone Master are controlled by anyone who passes the player's
  zone @lock.

See also: ZONE MASTERS, @lock
& LISTEN_PARENT
  Flag:  LISTEN_PARENT (players, things, rooms)
  
  When set on an object which also has the MONITOR flag set, this flag
  causes ^-listen patterns to be checked on the object's parents as well 
  as on the object.

See also: MONITOR, LISTENING
& POWERS LIST
  Powers can be granted only by wizards, using the @power command. Powers 
  cannot be granted to players who are set UNREGISTERED. Powers normally 
  give the player the ability to use a limited set of wizard/admin powers. 
  See 'help <power> power' for more info on any power.

  announce              Can use @wall command.  
  boot                  Can use @boot command.
  builder               Can use Builder commands.
  chat_privs            Can use Admin channels.
  debit                 Can use give with a negative amount.
  functions             Can use @function command.
  guest                 Guest. Restricted command set.
  halt                  Can @halt others' objects and do @allhalt.
  hide                  Can hide on the WHO list.
  hook                  Can use the @hook command.
  idle                  No inactivity timeout.
  link_anywhere         Can @link an exit to anyplace.
  login                 Not subject to login restrictions.
  long_fingers          Can do things remotely, like "get".
  many_attribs          Can exceed max_attrs_per_obj.

  Continued in 'help powers2'.
& POWERS2
& POWERS LIST2
  no_pay *              Doesn't need money for anything
  no_quota *            Has an unlimited quota
  open_anywhere         Can @open an exit from any room.
  pemit_all             Can @pemit to HAVEN/ulocked players.
  player_create         Can use @pcreate command.
  poll                  Can use @poll command.
  pueblo_send           Can use xch_cmd and send pueblo tags
  queue                 Has queue limit equal to the size of the database.
  quotas                Can use @quota commands on other players.
  search                Can do @search, @stats, and @entrances on anything.
  see_all               Sees everything as if it were Visual.
  see_queue             Can do @ps on anyone, and @ps/all.
  sql_ok                Can perform SQL queries
  tport_anything        Can @teleport anything.
  tport_anywhere        Can @teleport to anywhere.
  unkillable *          Cannot be killed
  can_spoof             Can use @ns*emit, ns*emit() and @*emit/spoof
  can_dark              Can @set themselves dark
  
  * When these powers are set on a player, all the objects they own which
    are not set MISTRUST are also considered to have the power.

See also: help @power, and especially @power/list
& ANNOUNCE POWER

  The Annouce @power lets objects set the Message of the Day via @motd,
  and use the @wall command to send a message to all connected players.
  Wizards have the power implicitly.
  
See also: @wall, @motd, CHAT_PRIVS POWER, loud, CAN_SPOOF POWER
& BOOT POWER

  Objects with the Boot power can @boot other players from the MUSH. Wizards
  have the power implicitly.
  
See also: @boot
& BUILDER POWER

  The Builder power has no built-in meaning, but many MUSHes choose to
  restrict building and/or object creation to objects with this power.
  
See also: @dig, @open, @create, @link, PLAYER_CREATE POWER
& CHAT_PRIVS POWER

  The Chat_Privs power allows non-wizard, non-royalty objects to use channels
  which have been restricted to 'Admin' with @channel/priv.
  
See also: @channel
& DEBIT POWER

  The Debit power lets objects take pennies from players with the 'give'
  command. Wizards have this power implicitly.
  
See also: give, money, NO_PAY POWER
& FUNCTIONS POWER

  The Functions power allows an object to use the @function command to add
  or delete functions. Wizards and royalty have this power implicitly.
  
See also: @function
& GUEST POWER

  Objects set Guest are very limited: they cannot control anything in the
  database (including themselves), which prevents them from setting flags or
  attributes, etc (though, for backwards compatability, they can still 
  examine themselves). They cannot join channels, or create objects. MUSHes
  often restrict other commands so that guests cannot use them.
  
  It's also possible to connect to a Guest player without using a password,
  allowing them to be used by newcomers to visit a game without making a
  character.
  
  Guests also have (and receive) a different amount of pennies to normal
  players (determined by the max_guest_pennies and guest_paycheck @config
  options).  They receive a different message when they connect (set via
  the guest_file config option). The way Guest connections work can be
  controlled via the max_guests @config option, and Guest logins can be
  disabled entirely with the guests @config option.
& HALT POWER

  The Halt power allows an object to @restart any object, @halt any object
  or pid, and to use @halt/all and @restart/all. Wizards have the power
  implicitly.

See also: @halt, @restart, @wait, QUEUE POWER, SEE_QUEUE POWER
& HIDE POWER

  The Hide power allows players to use the @hide command, as well as the
  'ch' command at the login screen. Players who have both this power and
  the Idle power will be set Hidden automatically when their connection
  reaches the idle time limit.
  
  Wizards have this power implicitly.
  
See also: @hide, hidden(), ch, IDLE POWER
& HOOK POWER

  Objects with the Hook @power can use the @hook command to hook built-in
  commands. Intended for startup objects which don't need to be wizard.
  Wizards have this power implicitly.
  
See also: @hook, @command
& IDLE POWER

  The Idle power stops a player from being disconnected when he has been idle
  for the idle_timeout. Instead, you will be hidden (if you also have the
  Hide power), or will simply remain connected. Wizards and Royalty have the
  power implicitly.

See also: HIDE POWER
& LINK_ANYWHERE POWER

  The Link_Anywhere power allows an object to link exits to any location.
  Can be useful for variable exits. Wizards and Royalty have the power
  implicitly.

See also: LINK_OK, OPEN_ANYWHERE POWER, @link
& LOGIN POWER

  The Login power allows a player to connect to the MUSH, even when logins
  have been disabled (via the "logins" @config option). Wizards and royalty
  have the power implicitly.

See also: @sitelock
& LONG_FINGERS POWER

  The Long_Fingers power allows objects to run a number of commands 
  (including "look", "with", "get" and others) on objects which they are not
  nearby. Wizards and Royalty have the power implicitly.
& MANY_ATTRIBS POWER

  The Many_Attribs power allows a player to have up to a million attributes,
  rather than the usual limit set in the max_attrs_per_object @config option.
  Useful for database objects.
& NO_PAY POWER

  The No_Pay power gives an object infinite pennies; it will never run out.
  Use carefully! Pennies are intended to prevent runaway code (infinite 
  loops) which can lag the game. It's recommended that, instead of setting
  objects no_pay, you regularly give them large amounts of money instead, as
  this will allow them to function correctly without letting them loop
  indefinitely.
  
  Wizards used to have this power implicitly, but no longer do, for the
  reasons given above. (Wizards can still give infinite numbers of pennies
  to others, however.)
  
  God is implicitly no_pay and, if you have the power and are not set
  MISTRUST, your objects are implicitly no_pay.
  
See also: give, DEBIT POWER
& NO_QUOTA POWER

  The No_Quota power lets you create an unlimited number of objects,
  regardless of @quota settings. Wizards, Royalty, and their objects have
  this power implicitly.
  
  If you have this power, and are not set MISTRUST, your objects have the
  power implicitly.
  
See also: QUOTA POWER, @quota
& OPEN_ANYWHERE POWER

  The Open_Anywhere power lets you @open exits from any location. Wizards
  and Royalty have the power implicitly.
  
See also: @open, OPEN_OK, @lock/open
& PEMIT_ALL POWER

  The Pemit_All power lets you page or @pemit any object, regardless of their
  @lock/page. Wizards have this power implicitly.
  
See also: LOUD, page, @pemit, @lock/page, CAN_SPOOF POWE
& PLAYER_CREATE POWER

  This power allows objects to use @pcreate. Wizards have the power
  implicitly.
  
See also: @pcreate
& POLL POWER

  Allows objects to change the @poll. Wizards have the power implicitly.
  
See also: @poll
& PUEBLO_SEND POWER

  Allows objects to send potentially unsafe Pueblo/HTML strings via tag()
  and similar functions. Wizards have the power implicitly.
  
See also: Pueblo, tag(), tagwrap(), html()
& QUEUE POWER

  Normally, the number of action lists an object can queue is limited by the
  queue_quota @config option. Objects with this power can queue additional
  action lists, equal to the number of objects in the database. Wizards have
  the power implicitly.
  
See also: SEE_QUEUE POWER
& QUOTAS POWER

  Objects with this power can see and change anyones quotas. Wizards have
  the power implicitly.
  
See also: QUOTA, NO_QUOTA POWER, @quota
& SEARCH POWER

  The Search power allows someone to use @search and @stats on objects they 
  can't examine. It also allows them to use the objmem() and playermem()
  functions.
  
See also: SEE_ALL POWER, @search, @stats, objmem(), playermem(), lsearch()
& SEE_ALL POWER

  The See_All power allows an object to examine anything in the database.
  Wizards and Royalty have the power implicitly.
& SEE_QUEUE POWER

  The See_Queue power allows an object to use @ps, lpids() and related 
  functions on any object/queue.
  
See also: @ps, lpids(), getpids(), pidinfo()
& SQL_OK POWER

  This power lets an object use @sql, sql() and related commands and
  functions, if the MUSH is connected to an SQL server. Wizards have the
  power implicitly.
  
See also: @sql, sql(), @mapsql, mapsql(), sqlescape()
& TPORT_ANYTHING POWER
& TPORT_ANYWHERE POWER

  The Tport_Anything power allows an object to teleport any object to a
  location they are allowed to teleport to.
  
  Tport_Anywhere allows an object to teleporting anything it is allowed
  to teleport to any location.
  
See also: HEAVY, @teleport, NO_TEL, Z_TEL
& UNKILLABLE POWER

  Objects with the Unkillable power cannot be "kill"ed by a non-wizard.
  If a player has this power and is not set MISTRUST, his objects have the
  power implicitly.
  
See also: kill, slay, MISTRUST
& CAN_SPOOF POWER

  The Can_Spoof power lets you use the @ns*emit commands and ns*emit()
  functions, which show messages without nospoof information. It also lets
  you use the /spoof switch to various @*emit commands, which shows nospoof
  information as the enactor rather than the executor. Wizards have this
  power implicitly.
  
See also: @nspemit, @pemit
& CAN_DARK POWER

  Objects with this power can set themselves DARK, and use the "cd" command
  at the connection screen to connect set dark.
  
See also: DARK, @hide, HIDE POWER
