& EVENTS
& EVENT
  PennMUSH Events are hardcoded events that may or may not be caused by
  players. The Event system lets administrators designate an object as
  an event handler (using the "event_handler" config option). The
  event_handler object will then have attributes triggered, with arguments,
  on specified events.

  To use the PennMUSH Event system:

  > @create Event Handler
  > @config/set event_handler=[num(Event Handler)]
  > &<event name> Event Handler=<action list>

  You will very likely want to set the event_handler option in your mush.cnf
  file to ensure it survives over dumps and is actively receiving events
  even during startup.

  The enactor of an event is either:
    1) The executor that caused it, or
    2) #-1 for system events without an executor.

  For a list of events and their arguments, see "help event list".

  For some examples of using events, see "help event examples".
& EVENT EXAMPLES
  Suppose you want random dbsave messages:
  > &DUMP`COMPLETE Event Handler=
        @config/set dump_complete=SAVE: [v(randword(lattr(me/dumpmsg`*)))]
  > &DUMPMSG`NOTHING Event=The Database has been saved, nothing to see here.
  > &DUMPMSG`GRETZKY Event=The Database saves, but Gretzky scores!
  > &DUMPMSG`GEICO Event=The Database saved 15% by switching to Geico!
  > @dump
  SAVE: The Database has been saved, nothing to see here.
  > @dump
  SAVE: The Database saved 15% by switching to Geico!

  Or admin want to be notified when a player connect attempt fails.
  > @set Event=wizard
  > &SOCKET`LOGINFAIL Event=@wizwall/emit On descriptor '%0' from IP '%1'
          a failed connect attempt to '%4': '%3'
  (Later, a player attempts to log in as #1)
  Broadcast: [Event Handler]: On descriptor 3, from IP '127.0.0.1',
    a failed connect attempt to '#1': 'invalid password'

  For more examples, see "help event examples2".
& EVENT EXAMPLES2
  Suppose you want @pcreated players to be powered builder, set shared and
  zonelocked to roys, but players created at the connect screen to not be.
  > @set Event=wizard
  > &PLAYER`CREATE Event=@assert %# ;
      @pemit %#=Auto-Setting [name(%0)] Builder and shared ;
      @power %0=builder ; @lock/zone %0=FLAG^ROYALTY ; @set %0=shared
  > @pcreate Grid-BC
  Auto-Setting Grid-BC Builder and Shared

  And for our last example: Suppose anytime somebody uses 'kill' or 'slay',
  you want to teleport them to a jail.
  > @dig Kill-jail
  > @desc Kill-Jail=You came here because you killed someone!
  > @set Event=Wizard
  > &object`kill event=@pemit %#=MURDERER! ; @tel %#=<dbref of Kill-Jail>
  > kill Mercutio
  You killed Mercutio!
  MURDERER!
  Jail (#123R)
  You came here because you killed someone!

  The Event Handler object, since it's handling so many events, may become
  cluttered with attributes. We recommend using @trigger and @include to
  separate events to multiple objects.
& EVENT LIST
  Event names are of the format <type>`<event>. The 'type' is used simply to
  group similar events together for help.

  Event syntax in the help is of the form:
  <eventgroup>`<eventname> (What is passed as %0, %1, ... %9)

  The following event types and events have been added to PennMUSH. To see
  the help for them, type "help event <type>".

  dump: dump`5min, dump`1min, dump`complete, dump`error
  object: object`create, object`destroy, object`move, object`rename,
          object`kill
  sql: sql`connect, sql`connectfail, sql`disconnect
  signal: signal`usr1, signal`usr2
  player: player`create, player`connect, player`disconnect
  socket: socket`connect, socket`disconnect, socket`loginfail,
          socket`createfail
& EVENT DUMP
  dump`5min (Original message, isforking)
      Database save will occur in 5 minutes.
  dump`1min (Original message, isforking)
      Database save will occur in 1 minute.
  dump`complete (Original message, wasforking)
      Database save has completed.
  dump`error (Error message, wasforking, exit_status)
      Database save failed! You might want this to alert any admin on.
      exit_status has different meanings in forking and non-forking
      dumps.
      In forking: exit_status is a string, either "SIGNAL <int>" or
        "EXIT <int>". SIGNAL <int> refers to the mush process receiving error
        message via signal while EXIT <int> refers to mush process exiting
        abnormally.
      In nonforking: exit_status is "PERROR <string>" - string being the
        error message returned by strerror(errno).
      If you are seeing errors on dbsave, we recommend setting forking_dump
      to 0, as nonforking dumps have more verbose error messages.

  These run in addition to any messages that may be sent. If you want to
  replace the messages, config (via @config or the .cnf file) the dump
  messages to be empty.
& EVENT OBJECT
  object`create  (new objid, cloned-from)
      Triggered on the creation of any object except player.
      If it was created using @clone, then cloned-from will be a objid.
      Otherwise cloned-from will be null.

  object`destroy (objid, origname, type, owner, parent, zone)
      Triggered _after_ the object is destroyed. Passed arguments are former
      objid, name, type, owner, etc. Enactor is always #-1, so use former
      owner.

  object`move (objid, newloc, origloc, issilent, cause)
      Triggered after the object is moved, @tel'd, or otherwise sent to a
      new location. If issilent is 1, then the object was moved using
      @tel/silent.

  object`kill    (objid of object killed, cost, wasslay)
      Triggered when an object has been killed with 'kill' or 'slay' command.
      Note that if this is set, it overrides the default behavior of
      @halting the object, @teling it home and giving it an amount of
      money that was paid to kill them. So if you want to mimic
      old behavior, you need:
      &OBJECT`KILL event handler=@halt %0 ; @tel %0=home ;
              give %0=mul(%1,fdiv(kill_bonus,100));

  object`rename  (objid, new name, old name)
      Triggered when any object is renamed.
& EVENT SQL
  sql`connect (platform)
      Triggered on successful connect to the SQL database.
      platform is 'mysql', 'psql' or similar.

  sql`connectfail (platform, Error message)
      Triggered on unsuccessful connect to the SQL database.

  sql`disconnect (platform, Error message)
      Triggered if SQL disconnects for any reason. Usually not a worry since
      Penn will auto-reconnect if it can.
& EVENT SIGNAL
No arguments are passed to these events.

  signal`usr1: Triggered when the PennMUSH process receives a "kill -USR1"

  signal`usr2: Triggered when the PennMUSH process receives a "kill -USR2"

  If these attributes exist, then penn will NOT perform what it usually does
  when it receives a signal. In effect, these override Penn's default actions.

  To mimic old behaviour:
  &SIGNAL`USR1 Event Handler=@pemit/list lwho()=GAME: Reboot w/o disconnect
      from game account, please wait. ; @shutdown/reboot
  &SIGNAL`USR2 Event Handler=@dump
& EVENT PLAYER
  player`create (objid, name, how, descriptor)
      Triggered when a player is created. If the player was @pcreated, then
      %# will be the person who did the @pcreate. If player was created
      by using 'create' at the connect screen, then %# will be #-1 and
      descriptor will be non-null.
      <how> is one of: "pcreate", "create" or "register".

  player`connect (objid, number of connections, descriptor)
      Similar to @aconnect, but for events, and so you can use descriptor.

  player`disconnect (objid, number of remaining connections, hidden?,
                     cause of disconnection, ip, descriptor, conn() secs,
                     idle() secs, recv bytes/sent bytes/command count)
      Similar to @adisconnect, but for event system, and with more
      information available.
& EVENT SOCKET
  socket`connect (descriptor, ip)
      Triggered when a socket first connects to the port. Using this and
      player`connect could be spammy. This happens when a connecting socket
      sees the connect screen.

  socket`disconnect (former descriptor, former ip, cause of disconnection,
                     recv bytes/sent bytes/command count)
      Triggered when a socket disconnects. Using this and player`disconnect
      could be spammy.

  socket`loginfail (descriptor, IP, count, reason, playerobjid)
      Triggered when a connection attempt fails. 'count' is the number of
      fails in the past 10 minutes. If used in conjuction with the config
      option connect_fail_limit, then any failures after the limit is reached
      will NOT trigger player`fail. If the connect is a failed attempt to log
      into a valid player, playerobjid will be set to that objid. Otherwise it
      will be set to #-1

  socket`createfail (descriptor, ip, count, reason, name)
      Triggered when a player create attempt fails. <count> is the # of
      fails caused by this ip.

    A sitelock rule with deny_silent will not trigger socket`createfail or
    socket`createfail.
